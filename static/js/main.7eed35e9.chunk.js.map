{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","quote","setQuote","getQuote","fetch","then","res","json","data","randomNum","Math","floor","random","length","useEffect","className","id","text","author","Button","onClick","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAwCeA,MAnCf,WAAgB,IAAD,EACb,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAW,WACfC,MAAM,+BACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QAChDX,EAASM,EAAKC,QAQlB,OAHAK,qBAAU,WACRX,MACC,IAED,qBAAKY,UAAU,MAAMC,GAAG,YAAxB,SACE,yBAAQD,UAAU,aAAlB,UACE,qBAAKC,GAAG,OAAR,SACGf,EAAMgB,OAET,qBAAKD,GAAG,SAAR,SACE,uCAAUf,EAAMiB,YAElB,cAACC,EAAA,GAAD,GAAQJ,UAAU,MAAMK,QAASjB,GAAjC,0BAAuD,aAAvD,mBAAsE,aAAtE,4CACA,qBAAKa,GAAG,cAAR,SAEE,mBAAGK,KAAK,mCAAR,SAA2C,cAACF,EAAA,EAAD,oCCpBtCG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7eed35e9.chunk.js","sourcesContent":["\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, Row } from 'react-bootstrap';\nfunction App() {\n  const [quote, setQuote] = useState('');\n  const getQuote = () => {\n    fetch(\"https://type.fit/api/quotes\")\n    .then(res => res.json())\n    .then((data) => {\n      let randomNum = Math.floor(Math.random() * data.length);\n      setQuote(data[randomNum]);\n    });\n    /* this functions first fetch the response from the api  than the  respose is passed through json() method and we will get an object and this will \n    contain a quote and the name of the author and we will now get an random member of the project*/\n  };\n  useEffect(() => {\n    getQuote();\n  }, {});\n  return (\n    <div className=\"App\" id=\"quote-box\">\n      <header className=\"App-header\">\n        <div id=\"text\">\n          {quote.text}\n        </div>\n        <div id=\"author\">\n          <span> - {quote.author}</span>\n        </div>\n        <Button className=\"btn\" onClick={getQuote} className = \"mt-3 mb-3\" id=\"new-quote\"> Get Quote.</Button>\n        <div id=\"tweet-quote\">\n          \n          <a href=\"https://twitter.com/intent/tweet\"><Button>   Tweet   </Button></a>\n          \n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}